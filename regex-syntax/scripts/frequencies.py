#!/usr/bin/env python3

# This does simple normalized frequency analysis on UTF-8 encoded text.
# Bytes that start multi-byte UTF-8 sequences each have a frequency of 1.0.
# This effectively discards them when multiplying byte frequencies.
# The idea here is that continuation bytes will be more discerning
# in a homogenous haystack.
# The frequencies for non prefix bytes should sum to 1.0.
# This list is written to src/freqs.rs.
#
# Currently, the frequencies are generated from the following corpuses:
#
#   *  5% OpenSubtitles 2016 - cn
#   * 30% OpenSubtitles 2016 - en
#   *  5% OpenSubtitles 2016 - ru
#   * 15% Source rustc (Rust files)
#   * 15% Source linux (C files)
#   * 15% Source pandas (Python files)
#   * 15% Source node (JavaScript files)

from argparse import ArgumentParser
from collections import Counter
from sys import stderr


preamble = """
// NOTE: This code was generated by "scripts/frequencies.py", do not edit.
""".lstrip()


def main(fpaths: list):
    freqs = compute_freqs(fpaths)
    print_rust_code(freqs)


def compute_freqs(fpaths: list):
    print_error("Computing frequencies...")

    # Load entire corpus files into memory, one at a time
    corpuses = (open(fpath, "rb").read() for fpath in fpaths)

    counts = Counter(b for corpus in corpuses for b in corpus)

    # Bytes that start multi-byte UTF-8 sequences.
    prefixes = set(range(0xC0, 0xFF + 1))

    total = sum(count for b, count in counts.items() if b not in prefixes)

    freqs = [1.0 if b in prefixes else counts[b] / total for b in range(256)]

    return freqs


def print_rust_code(freqs: list):
    print_error("Writing Rust code...")

    print(preamble)

    print("pub const BYTE_FREQUENCIES: [f64; 256] = [")

    for byte, freq in enumerate(freqs):
        # Add comment with byte representation
        print(f"    {freq:.6f}, // {repr(chr(byte))}")

    print("];")


def print_error(*args, **kwargs):
    print(*args, **kwargs, file=stderr)


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("fpaths", metavar="FILE", nargs="+")
    args = parser.parse_args()

    main(args.fpaths)
